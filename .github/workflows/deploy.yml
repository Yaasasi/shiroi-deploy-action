name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force:
        description: 'Force build (ignore HASH_FILE)'
        required: false
        default: 'false'
  repository_dispatch:
    types: [trigger-workflow]

permissions: write-all

env:
  HASH_FILE: build_hash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    if: ${{ github.event.head_commit.message != 'Update hash file' }}
    outputs:
      hash_content: ${{ steps.read_hash.outputs.hash_content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read HASH_FILE content
        id: read_hash
        run: |
          content=""
          if [ -f "${{ env.HASH_FILE }}" ]; then
            content=$(cat "${{ env.HASH_FILE }}" || true)
          fi
          echo "hash_content=$content" >> $GITHUB_OUTPUT

  check:
    name: Check need cancel
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      canceled: ${{ steps.decide.outputs.canceled }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Decide to cancel
        id: decide
        shell: bash
        env:
          HASH_CONTENT: ${{ needs.prepare.outputs.hash_content }}
          FORCE_BUILD_INPUT: ${{ github.event.inputs.force }}
        run: |
          set -e
          if [ "${FORCE_BUILD_INPUT}" = "true" ]; then
            echo "canceled=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ "${{ vars.FORCE_BUILD }}" = "true" ]; then
            echo "canceled=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          CURRENT_SHA_SHORT=$(git rev-parse --short HEAD)
          if [ -n "${HASH_CONTENT}" ] && [ "${HASH_CONTENT}" = "${CURRENT_SHA_SHORT}" ]; then
            echo "canceled=true" >> $GITHUB_OUTPUT
          else
            echo "canceled=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build artifact
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.canceled != 'true' }}
    strategy:
      matrix:
        node-version: [lts/*]
    outputs:
      sha_short: ${{ steps.meta.outputs.sha_short }}
      branch: ${{ steps.meta.outputs.branch }}
    steps:
      - name: Checkout Shiroi (private)
        uses: actions/checkout@v4
        with:
          repository: innei-dev/Shiroi
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - uses: jongwooo/next-cache@v1

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: |
          sh ./ci-release-build.sh

      - name: Ensure artifact exists
        run: |
          test -f assets/release.zip || (echo "assets/release.zip not found"; ls -la assets || true; exit 1)

      - name: Store commit metadata
        id: meta
        shell: bash
        run: |
          sha_short=$(git rev-parse --short HEAD)
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          echo "sha_short=$sha_short" >> "$GITHUB_OUTPUT"
          echo "branch=$branch_name" >> "$GITHUB_OUTPUT"

      - name: Upload build artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: shiroi-${{ steps.meta.outputs.sha_short }}
          path: assets/release.zip
          if-no-files-found: error
          retention-days: 30

      - name: Cache Build Artifacts (optional)
        id: cache-primes
        uses: actions/cache/save@v4
        with:
          path: assets
          key: ${{ github.run_number }}-release

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.result == 'success' }}
    permissions:
      contents: writ
