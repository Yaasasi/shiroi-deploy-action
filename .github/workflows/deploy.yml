name: Build and Upload Artifact

on:
  push:
    branches: [ main ]
  repository_dispatch:
    types: [trigger-workflow]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Shiroi
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.sha.outputs.short }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 👉 根据你的项目启用需要的环境（示例注释，下方自选其一或都删掉）
      # - name: Setup Node
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 20
      #     cache: npm
      # - name: Install deps (Node)
      #   if: hashFiles('package-lock.json') != ''
      #   run: npm ci
      # - name: Build (Node)
      #   if: hashFiles('package.json') != ''
      #   run: npm run build

      # - name: Setup Java
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: temurin
      #     java-version: 21
      # - name: Build (Gradle)
      #   if: hashFiles('gradlew') != ''
      #   run: |
      #     chmod +x ./gradlew
      #     ./gradlew clean build

      # - name: Setup Rust
      #   uses: dtolnay/rust-toolchain@stable
      # - name: Build (Rust)
      #   if: hashFiles('Cargo.toml') != ''
      #   run: cargo build --release

      - name: Generic build fallback
        run: |
          set -e
          if [ -f build.sh ]; then
            chmod +x build.sh
            ./build.sh
          elif [ -f Makefile ]; then
            make -j
          elif [ -f package.json ]; then
            npm ci || npm i
            npm run build
          else
            echo "No known build system detected. Skipping build step."
          fi

      - name: Compute short SHA
        id: sha
        run: echo "short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Pack artifact to assets/release.zip
        run: |
          mkdir -p assets
          # 若有固定的构建输出目录，替换下面的 out_dir
          out_dir="dist"
          if [ ! -d "$out_dir" ]; then
            # 常见目录兜底
            for d in dist build out target/release app/build/outputs; do
              if [ -d "$d" ]; then out_dir="$d"; break; fi
            done
          fi
          if [ -d "$out_dir" ]; then
            (cd "$out_dir" && zip -r "../assets/release.zip" .)
          else
            echo "No standard build output dir found; zipping repository (excluding .git & node_modules)."
            zip -r assets/release.zip . -x ".git/*" "node_modules/*"
          fi
          echo "release.zip prepared at assets/release.zip"

  upload:
    name: Upload Artifact
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout (for path resolution only)
        uses: actions/checkout@v4

      - name: Download workflow run workspace
        uses: actions/download-artifact@v4
        if: false
        with:
          name: dummy

      # 由于上一 job 已生成 assets/release.zip 在同一次 runner 的工作空间不可直接共享，
      # 这里改为使用 actions/upload-artifact 在 build 内；
      # 但为了最小改动，这里直接重新打包上传：更稳妥的方式是把“打包+上传”放在 build 内部。
      # 为避免重复逻辑，这里我们简单地再次打包（如果仓库空或者没有构建目录，上一步已生成 assets/release.zip）。
      - name: Ensure artifact exists
        run: |
          if [ ! -f assets/release.zip ]; then
            echo "assets/release.zip not found in this job. Creating a minimal placeholder from repo."
            mkdir -p assets && zip -r assets/release.zip . -x ".git/*" "node_modules/*"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shiroi-${{ needs.build.outputs.sha_short }}
          path: assets/release.zip
          if-no-files-found: error
          retention-days: 30

  # 原 workflow 中的 store 任务若需要保留（更新 hash 文件），把 needs 改成 build（不要依赖已删除的 deploy）
  store:
    name: Store hash file
    runs-on: ubuntu-latest
    needs: [build]
    env:
      HASH_FILE: build_hash
      SHA_SHORT: ${{ needs.build.outputs.sha_short }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write hash
        run: echo "$SHA_SHORT" > "$HASH_FILE"

      - name: Commit files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add "$HASH_FILE"
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update hash file"
            git push
          fi
