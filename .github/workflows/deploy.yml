name: Build Shiroi (Artifact)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}
  # 也可按需启用定时构建
  # schedule:
  #   - cron: "0 3 * * *"

permissions:
  contents: write    # 用于发布 Release
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build artifact
    runs-on: ubuntu-latest

    outputs:
      artifact_name: ${{ steps.prep.outputs.artifact_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install deps
        run: pnpm install --frozen-lockfile

      # 你若在 next.config.* 中启用了 output: "standalone"，这一步会生成 .next/standalone
      - name: Build
        run: pnpm build

      - name: Prepare release zip
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          SHA_SHORT=$(git rev-parse --short HEAD)
          NAME="shiroi-${SHA_SHORT}.zip"
          mkdir -p dist

          if [ -d ".next/standalone" ]; then
            # 优先使用 Next standalone，包含最小 node_modules，可直接 node server.js 跑
            mkdir -p dist/standalone
            cp -r .next/standalone/* dist/standalone/
            mkdir -p dist/standalone/.next
            cp -r .next/static dist/standalone/.next/static
            [ -d public ] && cp -r public dist/standalone/public || true
            cp package.json dist/standalone/package.json
            # 可选：把启动脚本名统一
            if [ -f dist/standalone/server.js ]; then
              :
            elif [ -f dist/standalone/server.mjs ]; then
              mv dist/standalone/server.mjs dist/standalone/server.js
            fi
          else
            # 兜底：没有 standalone 时，打包常规 build 结果（本地需再安装依赖）
            cp -r .next dist/.next
            [ -d public ] && cp -r public dist/public || true
            cp package.json dist/package.json
          fi

          # 附上环境模板（若存在）
          [ -f .env.example ] && cp .env.example dist/.env.example || true

          (cd dist && zip -qr "../${NAME}" .)
          echo "artifact_name=${NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prep.outputs.artifact_name }}
          path: ${{ steps.prep.outputs.artifact_name }}
          if-no-files-found: error
          retention-days: 30

  release:
    name: Publish Release on tag
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ needs.build.outputs.artifact_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
